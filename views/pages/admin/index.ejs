<%- contentFor('body') %>
<%- include('../elements/navbar', {
    nav: {
        "items": [{"title": "Home","href": "/"}, {"title": "Store", "href": "/store"}, {"title": "Admin", "href": "/admin", "active": true} ],
        "login": true
    }
}); %>

<div class="container my-5 page-content">
    <div class="d-flex justify-content-center  mt-2 bg-light-dark px-1 py-2 bt-round">
        <span>Admin Panel</span>
    </div>
    <div class="bg-dark px-1 py-2">
        <div class="alert alert-hidden mt-1" id="alert-top" role="alert"></div>
        <div class="grid-admin">

            <div class="admin-sidebar">
                <ul class="admin-nav">
                    <li class="admin-nav-item "><a id="admin-nav-items" class="admin-nav-link">Items</a></li>
                    <li class="admin-nav-item "><a id="admin-nav-users" class="admin-nav-link">Users</a></li>
                </ul>

            </div>
            <div class="admin-content">

                <div class="admin-controller">

                </div>
                <div class="py-1 px-2 admin-page admin-item-list">

                </div>

            </div>
        </div>
    </div>

    <div class="bb-round container px-4 bg-fake-rocketseat">
        <div class="alert alert-hidden mt-1" id="alert" role="alert">
        </div>
        <form action="" id="createItemForm" class="container">

            <h3 class="pt-4">Create Item</h3>

            <div class="row">

                <div class="col-4">
                    <label for="item_name">Item Name</label>
                    <input class="admin-input" type="text" id="item_name" name="item_name" placeholder="Item Name">
                </div>

                <div class="col-2">
                    <label for="price">Price</label>
                    <input class="admin-input" type="text" id="price" name="price" placeholder="500">
                </div>

                <div class="col-6">
                    <label for="image_url">Image URL</label>
                    <input class="admin-input" type="text" id="image_url" name="image_url" placeholder="https://seto.kousuke/nat.jpg">
                </div>

            </div>
            <div class="row mt-2">
                <div class="col-2">
                    <label for="user_role">User Role (Number)</label>
                    <input class="admin-input" type="text" id="user_role" name="user_role" placeholder="2">
                </div>

                <div class="col-4">
                    <label for="coin_type">Coin Type</label>
                    <select class="admin-input" id="coin_type" name="coin_type">
                        <option value="select">Select Option</option>
                        <option value="kudosu">Kudosu</option>
                        <option value="qactivity">QActivity</option>
                    </select>
                </div>

                <div class="col-6 d-flex align-text-bottom d-flex align-items-center justify-content-center">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="consumable" name="consumable">
                        <label class="custom-control-label" for="consumable">Is it consumable?</label>
                    </div>
                </div>

            </div>

            <div class="row justify-content-center bb-round px-4 pb-4 d-flex">

                <input class="btn btn-primary mt-4 px-4" type="submit" value="Create Item">

            </div>

            <div class="error-class row justify-content-center bb-round px-4 pb-4 d-flex flex-column text-center">

                <!--- javascript append -->

            </div>

        </form>

    </div>

</div>

<script>
    let items = null;
    let users = null;

    const getItemList = async () => {
        $(".admin-nav-link").removeClass("admin-nav-link-active")
        $("#admin-nav-items").addClass("admin-nav-link-active");
        let itemsResponse = await fetch("/api/item", {
            method: 'GET'
        });
        items = itemsResponse.text();
        items.then(value => {
            console.log(value)
            items = JSON.parse(value); 
            $(".admin-controller").html(`<div class="mx-3 my-1"> <input id="item-search" class="admin-input" type="text" placeholder="Search" aria-label="Search"></div>`);  
            $("#item-search").keyup(function() {
                renderList("item", ".admin-page", items.filter((x) => x.title.toLowerCase().includes($(this).val())));
            })
            renderList("item", ".admin-page", JSON.parse(value));
        })
    }

    //UNUSED YET
    const getUserList = async () => {
        $(".admin-nav-link").removeClass("admin-nav-link-active")
        $("#admin-nav-users").addClass("admin-nav-link-active");
        let usersResponse = await fetch("/api/user", {
            method: 'GET'
        });

        users = usersResponse.text();

        users.then(value => {
            console.log(value)
            users = JSON.parse(value); 
            $(".admin-controller").html(`<div class="mx-3 my-1"> <input id="user-search" class="admin-input" type="text" placeholder="Search" aria-label="Search"></div>`);  
            $("#user-search").keyup(function() {
                renderList("user", ".admin-page", users.filter((x) => x.username.toLowerCase().includes($(this).val().toLowerCase())));
            })
            renderList("user", ".admin-page", JSON.parse(value));
        })
    }
    $(document).ready(getItemList);

    $("#admin-nav-items").click(getItemList);
    $("#admin-nav-users").click(getUserList);

    async function editItem(item_id) {
        let item = items.find((a) => a._id == item_id);
        let dialog = bootbox.dialog({
            title: 'Edit ',
            message: `
            <form action="" id="editItemForm" class="container">
                <h3 class="pt-4">Update Item</h3>
                <div class="row">
                    <div class="col-4">
                        <label for="item_name">Item Name</label>
                        <input class="admin-input" type="text" id="item_name" value="${item.title}" name="item_name" placeholder="Item Name">
                    </div>
                    <div class="col-2">
                        <label for="price">Price</label>
                        <input class="admin-input" type="text" value="${item.price}" id="price" name="price" placeholder="500">
                    </div>
                    <div class="col-6">
                        <label for="image_url">Image URL</label>
                        <input type="text" class="admin-input" id="image_url" name="image_url" value="${item.image_url}" placeholder="https://seto.kousuke/nat.jpg">
                    </div>
                </div>
                <div class="row">

                    <div class="col-2">
                        <label for="user_role">User Role (Number)</label>
                        <input class="admin-input" type="text" id="user_role" value="${item.user_role == undefined ? 0 : item.user_role}" name="user_role" placeholder="2">
                    </div>

                    <div class="col-4">
                        <label for="coin_type">Coin Type</label>
                        <select class="admin-input" id="coin_type" name="coin_type">
                            <option value="select">Select Option</option>
                            <option selected value="kudosu">Kudosu</option>
                            <option value="qactivity">QActivity</option>
                        </select>
                    </div>

                    <div class="col-6 d-flex align-text-bottom d-flex align-items-center justify-content-center">
                        <div class="custom-control custom-switch">
                            <input type="checkbox" ${item.is_consumable == true ? "checked" : ""} class="custom-control-input" id="consumable" name="consumable">
                            <label class="custom-control-label" for="consumable">Is it consumable?</label>
                        </div>
                    </div>

                </div>
                <input class="btn btn-primary ml-auto mt-4 px-4" type="submit" value="Update Item">
                <a id="btn-closemodal" class="btn btn-danger ml-auto mt-4 px-4">Cancel</a>
            </form>`,
    size: 'large'
        })
        dialog.init();

        $("#btn-closemodal").click(()=> {
            dialog.modal('hide');
        })
        $("#editItemForm").submit((event) => {
            event.preventDefault();
            
            let form = document.getElementById('editItemForm')
            let formData = new FormData(form);
            let jsonData = Object.fromEntries(formData);
            let hostname = window.location.protocol;
            let headers = new Headers();
            headers.append("Content-Type", 'application/json');
            console.log(jsonData);
            let jsonRequest = {
                item_id: item_id,
                title: jsonData.item_name,
                image_url: jsonData.image_url,
                price: jsonData.price,
                is_consumable: (jsonData.is_consumable == 'on') ? true : false,
                user_role: jsonData.user_role //should default to zero
            }


            fetch(`${hostname}/api/item/update`, {
                    method: "POST",
                    headers: headers,
                    body: JSON.stringify(jsonRequest)
                })
                .then(function (res) {
                    return res.json();
                })
                .then(function (data) {
                    console.log(data);
                    if (data.error) {
                        dialog.find('.bootbox-body').append(`<div class="alert alert-danger">Error!</div>`);

                    } else {
                        dialog.modal('hide');
                        bootbox.alert({
                                title: "Success!",
                                message: "You've successfully updated the item '" + jsonRequest.title +"'!"
                            });
                    }
                }).catch((e) => {
                    console.log(e)
                    dialog.find('.bootbox-body').append(`<div class="alert alert-danger">Error!</div>`);

                });

        })
    }

    async function deleteItem(item_id) {
        let item = items.find((a) => a._id == item_id);
        let toDeleteId = item_id;
        let clickedButton = $("button[data-origin='" + item_id + "']");

        bootbox.confirm({
            message: "Do you want to delete '" + item.title + "'?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: (result) => {
                if (result == false)
                    return;
                let headers = new Headers();
                headers.append("Content-Type", 'application/json');
                let hostname = window.location.protocol;
                let loading = `<span class="material-icons">refresh</span>`;
                let jsonRequest = {
                    "item_id": item_id
                }

                clickedButton.html(loading);
                fetch(`${hostname}/api/item/delete`, {
                        method: "POST",
                        headers: headers,
                        body: JSON.stringify(jsonRequest)
                    })
                    .then(function (res) {
                        return res.json();
                    })
                    .then(function (data) {
                        console.log(data);
                        if (data.error) {
                            clickedButton.text("Delete");
                            bootbox.alert({
                                size: "small",
                                title: "Error!",
                                message: "Something occourred while deleting the item!"
                            });
                        } else {
                            bootbox.alert({
                                size: "small",
                                title: "Success!",
                                message: "You've successfully deleted the item '" + item.title +"'!"
                            });
                            
                            $("#" + toDeleteId).remove();

                        }
                    }).catch((e) => {
                        console.log(e)
                        bootbox.alert({
                                size: "small",
                                title: "Error!",
                                message: "Something occourred while deleting the item!"
                            });
                    });
            }
        });
    }
    // render funciton
    function renderList(type, element, json) {
        if (json == undefined)
            json = [];
        if (type == "item")  {
            $(element).html("");
            for (item of json) {
                $(element).append(`

                    <div id='${item._id}' class='admin-item'>
                        <div class='admin-item-description'>      
                            <div class='admin-item-title'> 
                                ${item.title}
                            </div>

                            <div>
                                <img class='admin-item-image' src=' ${item.image_url}'/>
                            </div> 

                            <div>
                                Price: ${item.price} kudosu
                            </div> 
                        
                        </div> 

                        <div class='admin-item-control'>

                            <button class='btn btn-danger button-buy' id='button-buy' onclick='deleteItem( \"${item._id}\")' data-origin='${item._id}'>Delete</button>
                            <button class='btn btn-success button-buy' id='button-buy' onclick='editItem( \"${item._id}\")' data-origin='${item._id}'>Update</button>
                                   
                        </div> 

                    </div>`);
            }
        } 
        if (type == "user") {
            $(element).html("");
            for (user of json) {
                $(element).append(`

                    <div id='${user._id}' class='admin-user'>
                        <div class='admin-user-description'>      
                            <div class='admin-user-title'> 
                                ${user.username}
                            </div>

                            <div>
                                <img class='admin-user-image' src='https://a.ppy.sh/${user.osu_id}'/>
                            </div> 

                            <div>
                                <p>${user.kudosu.total} total kudosu </p>
                                <p> Items: ${user.items.length} </p>
                            </div> 
                        
                        </div> 

                        <div class='admin-user-control'>

                            <button class='btn btn-secondary button-buy' id='button-buy' onclick='detailUser( \"${user._id}\")' data-origin='${user._id}'>Details</button>
                                 
                        </div> 

                    </div>`);
            }

        }
    }

    $("#updateItemForm").submit(e => {
        
    });

    $("#createItemForm").submit(e => {

        //this function won't let the browser refresh or open a new tab
        e.preventDefault();

        let coinvar = document.getElementById("coin_type");
        let coinOption = coinvar.options[coinvar.selectedIndex].value;

        let consumablevar = document.getElementById("consumable");
        let consumableOption = consumablevar.value;

        /*
         * Validation process of form Create Item starts here
         */

        item_name_filtered = item_name.value.replace(/ /g, '');
        image_url_filtered = image_url.value.replace(/ /g, '');

        //removes all previously triggered errors

        if (document.getElementById("lowvalue")) document.getElementById("lowvalue").remove();
        if (document.getElementById("invalidname")) document.getElementById("invalidname").remove();
        if (document.getElementById("addcoin")) document.getElementById("addcoin").remove();
        if (document.getElementById("addconsumable")) document.getElementById("addconsumable").remove();
        if (document.getElementById("role")) document.getElementById("role").remove();
        if (document.getElementById("urlerror")) document.getElementById("urlerror").remove();

        //price validation

        let errors = false;

        if (price.value < 500 || Number.isInteger(parseInt(price.value)) == false) {

            errors = true;
            $(".error-class").append(` 
            
            <p id="lowvalue" style="color: red">Your price is too low or invalid, people should spend more points for them to be worth a reward</p>
            
            `);

        }

        //name validation

        if (item_name_filtered == null || item_name_filtered == "") {

            errors = true;
            $(".error-class").append(` 
            
            <p id="invalidname" style="color: red">Your item name is invalid!</p>
            
            `);

        }

        //coin validation

        if (coinOption == "select") {

            errors = true;
            $(".error-class").append(` 
            
            <p id="addcoin" style="color: red">You must select a coin option</p>
            
            `);

        }

        //image validation

        if (image_url_filtered == null || image_url_filtered == "") {

            errors = true;
            $(".error-class").append(` 
            
            <p id="urlerror" style="color: red">You must add an image link</p>
            
            `);

        }

        //consumable validation

        if (consumableOption == "select") {

            errors = true;
            $(".error-class").append(` 
            
            <p id="addconsumable" style="color: red">You must select if an item is consumable or not</p>
            
            `);

        }

        //role validation

        if (user_role.value == "" || Number.isInteger(parseInt(user_role.value)) == false) {
            console.log(user_role.value)

            errors = true;
            $(".error-class").append(` 
            
            <p id="role" style="color: red">User role is invalid</p>
            
            `);
        }

        if (!errors) {
            let form = document.getElementById('createItemForm')
            let formData = new FormData(form);
            let jsonData = Object.fromEntries(formData);
            let hostname = window.location.protocol;
            let headers = new Headers();
            headers.append("Content-Type", 'application/json');
            console.log(jsonData);
            let jsonRequest = {
                title: jsonData.item_name,
                image_url: jsonData.image_url,
                price: jsonData.price,
                is_consumable: (jsonData.is_consumable == 'on') ? true : false,
                user_role: jsonData.user_role //should default to zero
            }


            fetch(`${hostname}/api/item`, {
                    method: "POST",
                    headers: headers,
                    body: JSON.stringify(jsonRequest)
                })
                .then(function (res) {
                    return res.json();
                })
                .then(function (data) {
                    console.log(data);
                    if (data.error) {
                        bootbox.alert({
                                size: "small",
                                title: "Error!",
                                message: "Something occourred while adding the item!"
                            });

                    } else {
                        bootbox.alert({
                                size: "small",
                                title: "Success!",
                                message: "You've successfully added the item '" + jsonRequest.title +"'!"
                            });
                    }
                }).catch((e) => {
                    console.log(e)
                    bootbox.alert({
                                size: "small",
                                title: "Error!",
                                message: "Something occourred while adding the item!"
                            });
                });

        }

    })
</script>